#!/bin/bash

#Custom Terminal HUD To Display Current System Information | Kali Linux Only
#Author | Haccmann - original script
#Author | Sliim - customized
#No fancy shit | Just Code

whoami=$(whoami)
hostname=$(hostname)
distro=$(lsb_release -d | cut -d":" -f2)
architecture=$(arch)
architecture1=$(getconf LONG_BIT)bit
kernel=$(uname -v | awk '{print $4, $5}')
desktop=$(echo $XDG_DATA_DIRS | grep -Eo 'xfce|kde|gnome'); test -z $desktop && desktop=$WINDOW_MANAGER
bash=$(bash --version | grep -m 1 "GNU" | cut -d"(" -f1 | awk '{print $4}')
zsh=$(zsh --version | cut -d" " -f2)
cpu=$(grep -m 1 "model name" /proc/cpuinfo | cut -d: -f2 | awk '{print $1, $2, $3, $4}')
cpu1=$(grep -m 1 "model name" /proc/cpuinfo | cut -dU -f2 | awk '{print $1, $2, $3, $4}')
cpu2=$(grep -c "processor" /proc/cpuinfo)
memory=$(cat /proc/meminfo | head -1 | awk '{print $2}')
memory1=$(echo "scale=3;${memory%/*}/1024/1024" | bc)
disk=$(df -h | grep -E "\/$" | awk '{print $3}')
disk1=$(df -h | grep -E "\/$" | awk '{print $2}')
ram=$(free -m | grep -i "cache:" | awk '{print $3}')MB
ram1=$(free -m | grep -i "mem:" | awk '{print $2}')MB
status_up="\e[1;92m☢\e[1;34m"
status_down="\e[1;91m☢\e[0m"

metasploit_status=$status_down
if ps aux | grep metasploit_worker | grep -v grep 2>&1 >/dev/null; then
  metasploit_status=$status_up
fi

beef_status=$status_down
if ps aux | grep -E "ruby .*/beef" | grep -v grep 2>&1 >/dev/null; then
  beef_status=$status_up
fi

ssh_status=$status_down
if ps aux | grep "/usr/sbin/sshd -D" | grep -v grep 2>&1 >/dev/null; then
  ssh_status=$status_up
fi

apache_status=$status_down
if ps aux | grep "/usr/sbin/apache2 -k start" | grep -v grep 2>&1 >/dev/null; then
  apache_status=$status_up
fi

nginx_status=$status_down
if ps aux | grep "nginx: worker process" | grep -v grep 2>&1 >/dev/null; then
  nginx_status=$status_up
fi

postgresql_status=$status_down
if ps aux | grep "bin/postgres -D /var/lib/" | grep -v grep 2>&1 >/dev/null; then
  postgresql_status=$status_up
fi

openvassd_status=$status_down
if ps aux | grep "openvassd" | grep -v grep 2>&1 >/dev/null; then
  openvassd_status=$status_up
fi

openvasmd_status=$status_down
if ps aux | grep "openvasmd" | grep -v grep 2>&1 >/dev/null; then
  openvasmd_status=$status_up
fi

gsad_status=$status_down
if ps aux | grep "/usr/sbin/gsad" | grep -v grep 2>&1 >/dev/null; then
  gsad_status=$status_up
fi

nessus_status=$status_down
if ps aux | grep "sbin/nessus-service -D" | grep -v grep 2>&1 >/dev/null; then
  nessus_status=$status_up
fi

nexpose_status=$status_down
if ps aux | grep "SCREEN -d -m -S nexposeconsole" | grep -v grep 2>&1 >/dev/null; then
  nexpose_status=$status_up
fi

dhcpd_status=$status_down
if ps aux | grep "sbin/dhcpd" | grep -v grep 2>&1 >/dev/null; then
  dhcpd_status=$status_up
fi

hostapd_status=$status_down
if ps aux | grep "sbin/hostapd" | grep -v grep 2>&1 >/dev/null; then
  hostapd_status=$status_up
fi

dnsmasq_status=$status_down
if ps aux | grep "sbin/dnsmasq" | grep -v grep 2>&1 >/dev/null; then
  dnsmasq_status=$status_up
fi

faraday_status=$status_down
if ps aux | grep "faraday.py" | grep -v grep 2>&1 >/dev/null; then
  faraday_status=$status_up
fi

faraday_server_status=$status_down
if ps aux | grep "faraday-server.py" | grep -v grep 2>&1 >/dev/null; then
  faraday_server_status=$status_up
fi

msf_status=$status_down
if ps aux | grep "bin/msfconsole" | grep -v grep 2>&1 >/dev/null; then
  msf_status=$status_up
fi

teamserver_status=$status_down
if ps aux | grep -E "/bin/bash.*/teamserver" | grep -v grep 2>&1 >/dev/null; then
  teamserver_status=$status_up
fi

kismet_status=$status_down
if ps aux | grep "kismet_server" | grep -v grep 2>&1 >/dev/null; then
  kismet_status=$status_up
fi

###############
# HUD Display #
###############

echo -e "\e[1;34m8N    8  N888
888   88   D88  \e[1;91m$distro $architecture $architecture1\e[1;34m
8888N D88    88D           Kernel:\e[0m $kernel\e[1;34m
8888888888D   88ON         Desktop:\e[0m $desktop\e[1;34m
888888888888   NNN         Shellz:\e[0m Bash $bash\e[1;34m\e[0m - Zsh $zsh\e[1;34m
8888888888888N
D8888888888888888888     CPU:\e[0m $cpu\e[1;34m
   N88888888888888888        \e[0m $cpu1 x $cpu2\e[1;34m
       N88888888888888   RAM:\e[0m $ram\e[1;34m/\e[0m$ram1 \e[1;34m
        888888888888888  Disk:\e[0m $disk\e[1;34m/\e[0m$disk1\e[1;34m
        88888888888DD88
        88888888888N 88D
        8888888888888ND88   $msf_status MSF Console $ssh_status SSH      $openvassd_status OpenVAS SD\e[1;34m
        N88888888888888888  $faraday_status Faraday     $apache_status Apache2  $openvasmd_status OpenVAS MD\e[1;34m
            D888888888888                 $nginx_status Nginx    $gsad_status OpenVAS SAD\e[1;34m
                N888888888OD              $postgresql_status Postgre  $nessus_status Nessus\e[1;34m
                   N888888888N            $dhcpd_status dhcpd    $nexpose_status NeXpose\e[1;34m
                     N88888888O8N         $hostapd_status hostapd\e[1;34m  $metasploit_status Metasploit\e[1;34m
                       8888888888888DD    $dnsmasq_status dnsmasq\e[1;34m  $kismet_status Kismet\e[1;34m
                        D8888888888888    $beef_status BeEF\e[1;34m
                          8888888888D     $faraday_server_status Faraday Server\e[1;34m
                           D888888        $teamserver_status TeamServer\e[1;34m
                            8888D
=======  Networks  ======== N88D\e[0m"
ip -o a | grep "inet "|grep -v "lo " |awk '{print "=> \033[1;36m" $2 "\033[0m: \033[1;37m" $4 "\033[0m"}'
echo
